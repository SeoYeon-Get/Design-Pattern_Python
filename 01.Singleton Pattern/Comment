* 싱글턴(Singleton) 패턴 

1) 정의 
- 클라이언트가 여러번 객체 생성을 하더라도 오직 하나의 클래스 객체만 생성되도록 한다.
- 인스턴스가 프로그램 내에서 오직 하나만 생성되는 것을 보장하고, 프로그램 어디에서든 이 인스턴스에 접근할 수 있도록 하는 패턴.
- 즉, 인스턴스가 사용될 때 똑같은 인스턴스를 여러 개 만드는 것이 아니라, 기존에 생성했던 동일한 인스턴스를 사용하게끔 한다.
    
2) 이점  
- 메모리 측면 : 최초 한번의 new 연산자를 통해 고정된 메모리 영역을 사용하기 때문에 추후 해당 객체에 접근할 때 메모리 낭비를 방지할 수 있다. 

3) 문제점
- 동시성 문제 : 멀티 스레딩 환경에서 발생할 수 있다. -> 동기화로 해결할 수 있음.
- SOLID 원칙 위반 가능성: 의존 관계상 클라이언트가 구체 클래스에 의존하게 됨 -> DIP 또는 OCP 원칙을 위반할 수 있음.
- 내부 코드를 변경하기 어려움 -> 유연성이 떨어짐

4) 용도(목적) 
- 클래스에 대한 단일 객체 생성
- 전역 객체 제공
- 공유된 리소스에 대한 동시 접근 제어  

5) 구현 : __new__메서드를 재정의한 후 해당 메서드 내에서 이미 객체가 생성됐다면 객체를 생성해주지 않도록 처리한다.
객체의 생성 여부는 모든 클래스 객체의 속성 변수로 _instance 를 추가한 후 해당 변수로 관리하도록 한다.

6) 사용 예시 : 로깅, 데이터베이스 관련 작업, 프린터 스풀러 등

예시코드) 

class Singleton(object):
    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, "_instance"):         # Foo 클래스 객체에 _instance 속성이 없다면
            print("__new__ is called\n")
            cls._instance = super().__new__(cls)  # Foo 클래스의 객체를 생성하고 Foo._instance로 바인딩
        return cls._instance                      # Foo._instance를 리턴

    def __init__(self, data):
        cls = type(self)
        if not hasattr(cls, "_init"):             # Foo 클래스 객체에 _init 속성이 없다면
            print("__init__ is called\n")
            self.data = data
            cls._init = True


s1 = Singleton(3)
s2 = Singleton(4)
print(s1.data)
print(s2.data)



