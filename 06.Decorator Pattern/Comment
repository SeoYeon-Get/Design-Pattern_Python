* 데코레이터(Decorator)패턴

1) 정의 및 특징
- 주어진 상황 및 용도에 따라 어떤 객체에 책임을 덧붙이는 패턴으로, 기능 확장이 필요할 때 서브클래싱 대신 쓸 수 있는 유연한 대안이 될 수 있다.
- 주어진 상황 및 용도에 따라 어떤 객체에 책임(기능)을 동적으로 추가하는 패턴
- Component : 실질적인 인스턴스를 컨트롤하는 역할
- ConcreteComponent : Component의 실질적인 인스턴스의 부분으로 책임의 주체의 역할
- Decorator : Component와 ConcreteDecorator를 동일시 하도록 해주는 역할
- ConcreteDecoreator : 실질적인 장식 인스턴스 및 정의이며 추가된 책임의 주체

2) 장단점
장점
- 기존 코드를 수정하지 않고도 데코레이터 패턴을 통해 행동을 확장시킬 수 있습니다.
- 구성과 위임을 통해서 실행중에 새로운 행동을 추가할 수 있습니다.

단점
- 의미없는 객체들이 너무 많이 추가될 수 있습니다.
- 데코레이터를 너무 많이 사용하면 코드가 필요 이상으로 복잡해질 수 있습니다.

3) 용도
- 클래스의 요소들을 계속해서 수정을 하면서 사용하는 구조가 필요한 경우
- 여러 요소들을 조합해서 사용하는 클래스 구조인 경우
- 예시 상황 : 커피를 제조하는 방법에 대해서 말해본다.
커피는 종류마다 아메리카노는 에스프레소에 물을 섞고 카페라떼는 에스프레소에 스팀우유나 휘핑크림을 얹기도 하는 등 커피를 만들때 다양한 재료들의 구성으로 
하나의 커피가 완성된다. 이 재료들을 모두 클래스로 구현해 준다면 굉장히 많은 클래스들을 구현해줘야 할 것이다. 또 이 구조는 상당히 비효율적인데, 그 이유는 새로운 커피를 
하나 개발할 때마다 그 커피에 들어가는 재료의 객체를 만들고 기능을 추가해 주어야 하기 때문이다. 커피의 종류가 많으면 많아질수록 코드가 비효율적이게 될 것이다. 
또한 커피를 만들때마다 매번 해당하는 클래스들의 객체를 생성해주어야 하는 문제도 있다. 이를 해결하기 위해 기본 커피의 재료인 에스프레소라는 틀을 추상적으로 가지고 
커피를 만들때 들어가는 재료들을 장식하는 방식을 사용하는 것이다. 

예시 코드)

# Python 에서 추상 클래스와 메소드를 만들기 위해 추가
from abc import ABCMeta, abstractmethod

# 음료 클래스
class Beverage(object):
    __metaclass__ = ABCMeta #추상 클래스로 선언

    def __init__(self):
        self.description = "Null"
    
    def get_description(self):
        return self.description
    @abstractmethod #추상 메소드 선언
    def cost(self): pass

# 음료를 상속받은 아메리카노 객체 선언
class Americano(Beverage):
   #아메리카노 객체 생성
    def __init__(self):
        self.description = "Americano"
    #가격을 리컨하는 함수
    def cost(self):
        return 1.99

# 데코레이터 클래스 선언
class CondimentDecorator(Beverage):
    __metaclass__ = ABCMeta
    @abstractmethod
    def get_description(self): pass

# 소이밀크를 추가하는 클래스 선언 - 데코레이터 상속
class Soy(CondimentDecorator):
    def __init__(self, beverage):
        self.beverage = beverage
    #기존 음료에 소이밀크 추가
    def get_description(self):
        return self.beverage.get_description() + ", Soy"
    #기존 음료수 가격에 소이밀크 가격 추가
    def cost(self):
        return self.beverage.cost() + 0.5

a = Americano()

a_soy = Soy(a)

print a_soy.get_description(), a_soy.cost()

