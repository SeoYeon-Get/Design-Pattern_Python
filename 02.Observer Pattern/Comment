* 옵저버 패턴

1) 정의 및 특징
- 특정 객체의 데이터의 변경이 발생하였을 때, 상대 클래스 및 객체에 의존하지 않으면서 데이터 변경을 통보하고자 할 때 사용하는 패턴이다. 
- 옵저버 패턴은 통보 대상 객체의 관리를 Subject 클래스와 Observer 인터페이스로 일반화한다. 
   -> 데이터 변경을 통보하는 클래스(ConcreteSubject)는 통보 대상 클래스/객체ConcreteObserver)에 대한 의존성을 제거할 수 있다.
   -> 통보 대상 클래스나 대상 객체의 변경에도 ConcreteSubject 클래스를 수정 없이 그대로 사용할 수 있도록 한다.
- Subject : 관찰 대상이 되는 객체. 자신을 관찰하는 옵저버들을 append한 리스트로 옵저버를 관리(attach, detach, notify)함.
- Observer : Subject를 관찰하는 객체. Subject가 notify를 호출하면 Observer의 update가 호출됨.
- 일대다 관계

2) 사용 예시 : 이벤트 핸들러

3) 종류 : 푸시(push)와 풀(pull) 이 있음.

예시 코드) 코드 출처 : https://eomtttttt-develop.tistory.com/72

import abc
 
class Subject:
  __metaclass__ = abc.ABCMeta
 
  @abc.abstractmethod
  def register_observer(self):
    pass
 
  @abc.abstractmethod
  def remove_observer(self):
    pass
 
  @abc.abstractmethod
  def notify_observer(self):
    pass
 
class Observer:
  __metaclass__ = abc.ABCMeta
 
  @abc.abstractmethod
  def update(self):
    pass
 
class WeatherData(Subject):
  def __init__(self):
    self.observers = []
    self.temperature = 0
    self.humidity = 0
    self.pressure = 0
 
  def register_observer(self, observer):
    self.observers.append(observer)
 
  def remove_observer(self, observer):
    self.observers.remove(observer)
 
  def notify_observer(self):
    for observer in self.observers:
      observer.update(self.temperature, self.humidity, self.pressure)
 
  def get_temperature(self):
    return self.temperature
 
  def get_humidity(self):
    return self.humidity
 
  def get_pressure(self):
    return self.pressure
 
  def measurements_changed(self):
    self.notify_observer()
 
  def set_measurements(self, temperature, humidity, pressure):
    self.temperature = temperature
    self.humidity = humidity
    self.pressure = pressure
    self.measurements_changed()
 
class CurrentCondition(Observer):
  def __init__(self, subject):
    self.subject = subject
    self.subject.register_observer(self)
 
  def update(self, temperature, humidity, pressure):
    self.temperature = temperature
    self.humidity = humidity
    self.pressure = pressure
    self.display()
 
  def remove(self):
    self.subject.remove_observer(self)
 
  def display(self):
    print ('Current condition temp: %s hum: %s press: %s'
           %(self.temperature, self.humidity, self.pressure))
 
class StaticsDisplay(Observer):
  def __init__(self, subject):
    self.subject = subject
    self.subject.register_observer(self)
 
  def update(self, temperature, humidity, pressure):
    self.temperature = temperature
    self.humidity = humidity
    self.pressure = pressure
    self.display()
 
  def remove(self):
    self.subject.remove_observer(self)
 
  def display(self):
    print ('Static display temp: %s hum: %s press: %s'
           %(self.temperature, self.humidity, self.pressure))
 
print("###START####")
 
weather_data = WeatherData()
current_condition = CurrentCondition(weather_data)
statics_display = StaticsDisplay(weather_data)
 
weather_data.set_measurements(10, 50, 30)
weather_data.set_measurements(20, 60, 40)
 
print("###Remove static_display observer###")
statics_display.remove()
 
weather_data.set_measurements(1, 2, 3)
